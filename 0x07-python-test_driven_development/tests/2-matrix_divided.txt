The ``matrix_divided`` module
====================================

Using ``matrix_divided``
------------------------------------

Import matrix_divided function from 2-matrix_divided

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Case 1 - sumplied with valid parameters
    
    >>> matrix = [[1, 2, 3],[4, 5, 6]]
    
    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Case 2 - suply a level 1 matrix with different types (list, int, float ...)
    
    >>> matrix = [[1, 2, 3],[4, 5, 6], True, "Hello"]
    
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats


Case 3 - suply a level 1 matrix with lists of different sizes
    
    >>> matrix = [[1, 2, 3],[4, 5, 6,5]]
    
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

Case 4 - suply lists with different types (int, float, strings ...)
    
    >>> matrix = [[1, 2, "hello"],[True, 5, 6]]
    
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Case 5 - parameter div with a non int or float type
    
    >>> matrix = [[1, 2, 3],[4, 5, 6]]
    
    >>> matrix_divided(matrix, "hello")
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

    >>> matrix_divided(matrix, None)
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

Case 6 - parameter div equal to  0
    
    >>> matrix = [[1, 2, 3],[4, 5, 6]]
    
    >>> matrix_divided(matrix, 0)
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero